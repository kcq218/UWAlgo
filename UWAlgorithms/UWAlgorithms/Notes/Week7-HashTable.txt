HashTable

Consist of Arrays
Take key and convert it to an index
access content based on that index
converting key to index is hashing
Example: 
1. Hash a key (0 1)
2. Mod by size of table to get index of the array (O 1)
3. if there is a value at that index and is the same value as the key then we found the value
4. If it does not match but there are still values at that index (linkedlist) Keep going down values of that index to find the next match
O(1) time complexity for insertion and searching

Collision
Collisiong since hash function might result in same integer
caused by bad hasing 
or load factor(1 if storage is full and .5 if half) n/hashtable size. can be bigger than one if using chaining.
Linear probing is maxed out at 1.
collision is resolved by chaining or linear probing
if full we cannot simply copy over to a bigger array due to the size of the array when it is hashed again.
Linear Probing causes a lot of work when collision happens.

Hash Function
Should give good distribution
it should be deterministic everytime, returns consistent value.
hashcode()

Quiz
Hash function takes as input the key
Hash value of the key is used to index into the hashtable
Factor that affect Hash Table Performance
how evenly distributed
collision
load factor
Load factor
Number of entries/Capicity of the table
Load factor does not affect efficiency in searching

When HashTable is full
Allocate the bigger array
Rehash Key present in the hash table to determine new indices into the bigger array
